
You submitted this quiz on Sun 12 Jan 2014 5:04 AM PST. You got a score of 9.00 out of 10.00. You can attempt again, if you'd like.

SCORE: 10.00 / 10.00

Week #1 Quiz
Question 1
If we need to use each thread to calculate one output element of a vector addition, what would be the expression for mapping the thread/block indices to data index:
i=blockIdx.x + threadIdx.x;
i=blockIdx.x*blockDim.x + threadIdx.x; <---
i=threadIdx.x + threadIdx.y;
i=blockIdx.x * threadIdx.x;

Question 2
Assume that we want to use each thread to calculate two (adjacent) elements of a vector addition. What would be the expression for mapping the thread/block indices to I, the data index of the first element to be processed by a thread?
i=blockIdx.x*threadIdx.x*2;
i=(blockIdx.x*blockDim.x + threadIdx.x)*2; <---
i=blockIdx.x*blockDim.x + threadIdx.x +2;
i=blockIdx.x*blockDim.x*2 + threadIdx.x;

Question 3
We want to use each thread to calculate two elements of a vector addition. Each thread block process 2*blockDim.x consecutive elements that form two sections. All threads in each block will first process a section first, each processing one element. They will then all move to the next section, each processing one element. Assume that variable i should be the index for the first element to be processed by a thread. What would be the expression for mapping the thread/block indices to data index of the first element?
i=blockIdx.x*threadIdx.x*2
i=blockIdx.x*blockDim.x*2 + threadIdx.x; <---
i=blockIdx.x*blockDim.x + threadIdx.x +2;
i=(blockIdx.x*blockDim.x + threadIdx.x)*2;

Question 4
For a vector addition, assume that the vector length is 8000, each thread calculates one output element, and the thread block size is 1024 threads. The programmer configures the kernel launch to have a minimal number of thread blocks to cover all output elements. How many threads will be in the grid?
8196
8192 <---
8000
8200

Question 5
If we want to allocate an array of v integer elements in CUDA device global memory, what would be an appropriate expression for the second argument of the cudaMalloc() call?
v
v * sizeof(int) <---
n
n * sizeof(int)

Question 6
If we want to allocate an array of n floating-point elements and have a floating-point pointer variable d_A to point to the allocated memory, what would be an appropriate expression for the first argument of the cudaMalloc() call?
(void *) d_A
(void **) &d_A <---
n
*d_A

Question 7
If we want to copy 3000 bytes of data from host array h_A (h_A is a pointer to element 0 of the source array) to device array d_A (d_A is a pointer to element 0 of the destination array), what would be an appropriate API call for this data copy in CUDA?
cudaMemcpy(h_A, d_A, 3000, cudaMemcpyDeviceTHost);
cudaMemcpy(d_A, h_A, 3000, cudaMemcpyHostToDevice); <---
cudaMemcpy(3000, h_A, d_A, cudaMemcpyHostToDevice);
cudaMemcpy(3000, d_A, h_A, cudaMemcpyHostToDevice);

Question 8
How would one declare a variable err that can appropriately receive returned value of a CUDA API call?
cudaError err;
cudaError_t err; <---
int err;
cudaSuccess_t err;

Question 9 (?)
We are to process a 600X800 (600 pixels in the y or vertical direction, 800 pixels in the x or horizontal direction) picture with the PictureKernel in Lecture 1.7:

__global__ void PictureKernel(float* d_Pin, float* d_Pout, int n, int m) {
// Calculate the row # of the d_Pin and d_Pout element to process
int Row = blockIdx.y*blockDim.y + threadIdx.y;

// Calculate the column # of the d_Pin and d_Pout element to process
int Col = blockIdx.x*blockDim.x + threadIdx.x;

// each thread computes one element of d_Pout if in range
if ((Row < m) && (Col < n))
  { d_Pout[Row*n+Col] = 2*d_Pin[Row*n+Col];
  }
}

Assume that we decided to use a grid of 16X16 blocks. That is, each block is organized as a 2D 16X16 array of threads. Which of the following statements sets up the kernel configuration properly? Assume that int variable n has value 800 and int variable m has value 600. The kernel is launched with the statement PictureKernel<<>>(d_Pin, d_Pout, n, m);,dimblock>

dim3 dimGrid(ceil(m/16.0), ceil(n/16.0), 1); dim3 DimBlock(16,16,1);
dim3 DimGrid(ceil(n/16.0), ceil(m/16.0), 1); dim3 DimBlock(16, 16, 1); <---
dim3 DimGrid(1, ceil(n/16.0), ceil(m/16.0); dim3 DimBlock(1, 16, 16);
dim3 DimGrid(1, ceil(m/16.0), ceil(n/16.0); dim3 DimBlock(1, 16, 16);

Question 10
Which of the following is true?
In a CUDA kernel, one cannot use any loops.
To multiply a 100X96 matrix A with a 96X60 matrix B with the simple matrix multiplication kernel using 16X16 thread blocks, we will launch a grid of 28 thread blocks <---
If M is a matrix with 8 rows and 6 columns, M(5, 2) (the element in row 5 and Column 2) is accessed as M[38] in C.
In a CUDA kernel, there can be no if statements.

